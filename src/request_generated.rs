// automatically generated by the FlatBuffers compiler, do not modify


#![allow(unused_imports, dead_code)]

use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod eisenbeton {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod wire {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod request {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum EisenRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EisenRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EisenRequest<'a> {
    type Inner = EisenRequest<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> EisenRequest<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        EisenRequest {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EisenRequestArgs<'args>) -> flatbuffers::WIPOffset<EisenRequest<'bldr>> {
      let mut builder = EisenRequestBuilder::new(_fbb);
      if let Some(x) = args.content { builder.add_content(x); }
      if let Some(x) = args.content_type { builder.add_content_type(x); }
      if let Some(x) = args.method { builder.add_method(x); }
      if let Some(x) = args.path { builder.add_path(x); }
      if let Some(x) = args.uri { builder.add_uri(x); }
      builder.finish()
    }

    pub const VT_URI: flatbuffers::VOffsetT = 4;
    pub const VT_PATH: flatbuffers::VOffsetT = 6;
    pub const VT_METHOD: flatbuffers::VOffsetT = 8;
    pub const VT_CONTENT_TYPE: flatbuffers::VOffsetT = 10;
    pub const VT_CONTENT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn uri(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EisenRequest::VT_URI, None)
  }
  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EisenRequest::VT_PATH, None)
  }
  #[inline]
  pub fn method(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EisenRequest::VT_METHOD, None)
  }
  #[inline]
  pub fn content_type(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EisenRequest::VT_CONTENT_TYPE, None)
  }
  #[inline]
  pub fn content(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(EisenRequest::VT_CONTENT, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for EisenRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"uri", Self::VT_URI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"path", Self::VT_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"method", Self::VT_METHOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"content_type", Self::VT_CONTENT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(&"content", Self::VT_CONTENT, false)?
     .finish();
    Ok(())
  }
}
pub struct EisenRequestArgs<'a> {
    pub uri: Option<flatbuffers::WIPOffset<&'a str>>,
    pub path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub method: Option<flatbuffers::WIPOffset<&'a str>>,
    pub content_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub content: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for EisenRequestArgs<'a> {
    #[inline]
    fn default() -> Self {
        EisenRequestArgs {
            uri: None,
            path: None,
            method: None,
            content_type: None,
            content: None,
        }
    }
}
pub struct EisenRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EisenRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_uri(&mut self, uri: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EisenRequest::VT_URI, uri);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EisenRequest::VT_PATH, path);
  }
  #[inline]
  pub fn add_method(&mut self, method: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EisenRequest::VT_METHOD, method);
  }
  #[inline]
  pub fn add_content_type(&mut self, content_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EisenRequest::VT_CONTENT_TYPE, content_type);
  }
  #[inline]
  pub fn add_content(&mut self, content: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EisenRequest::VT_CONTENT, content);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EisenRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EisenRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EisenRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for EisenRequest<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("EisenRequest");
      ds.field("uri", &self.uri());
      ds.field("path", &self.path());
      ds.field("method", &self.method());
      ds.field("content_type", &self.content_type());
      ds.field("content", &self.content());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_eisen_request<'a>(buf: &'a [u8]) -> EisenRequest<'a> {
  unsafe { flatbuffers::root_unchecked::<EisenRequest<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_eisen_request<'a>(buf: &'a [u8]) -> EisenRequest<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<EisenRequest<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `EisenRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eisen_request_unchecked`.
pub fn root_as_eisen_request(buf: &[u8]) -> Result<EisenRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EisenRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EisenRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_eisen_request_unchecked`.
pub fn size_prefixed_root_as_eisen_request(buf: &[u8]) -> Result<EisenRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EisenRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EisenRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eisen_request_unchecked`.
pub fn root_as_eisen_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EisenRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EisenRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EisenRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eisen_request_unchecked`.
pub fn size_prefixed_root_as_eisen_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EisenRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EisenRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EisenRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EisenRequest`.
pub unsafe fn root_as_eisen_request_unchecked(buf: &[u8]) -> EisenRequest {
  flatbuffers::root_unchecked::<EisenRequest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EisenRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EisenRequest`.
pub unsafe fn size_prefixed_root_as_eisen_request_unchecked(buf: &[u8]) -> EisenRequest {
  flatbuffers::size_prefixed_root_unchecked::<EisenRequest>(buf)
}
#[inline]
pub fn finish_eisen_request_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<EisenRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_eisen_request_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<EisenRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod request
}  // pub mod wire
}  // pub mod eisenbeton

